<script>
window.Tone = require('tone')
import * as Util from '../_common/js/util'
import * as Api from '../_common/js/api'
import * as Cookies from "js-cookie"
import * as Magic from '../_common/js/magic'
import 'swiper/dist/css/swiper.css'
import vueSlider from 'vue-slider-component'
import {
  swiper,
  swiperSlide
} from 'vue-awesome-swiper'

const MINI_KEY_LENGTH = 200 // px
var piano = new Tone.Sampler({
  'C4': 'C4.[mp3|ogg]',
  'D#4': 'Ds4.[mp3|ogg]',
  'F#4': 'Fs4.[mp3|ogg]',
  'A4': 'A4.[mp3|ogg]',
  'C5': 'C5.[mp3|ogg]',
  'D#5': 'Ds5.[mp3|ogg]',
  'F#5': 'Fs5.[mp3|ogg]',
  'A5': 'A5.[mp3|ogg]',
  'C6': 'C6.[mp3|ogg]',
}, {
  'release': 1,
  'baseUrl': 'static/audio/'
}).toMaster()

var mbox = new Tone.Sampler({
  'C4': 'C4.[mp3|ogg]',
  'D#4': 'Ds4.[mp3|ogg]',
  'F#4': 'Fs4.[mp3|ogg]',
  'A4': 'A4.[mp3|ogg]',
  'C5': 'C5.[mp3|ogg]',
  'D#5': 'Ds5.[mp3|ogg]',
  'F#5': 'Fs5.[mp3|ogg]',
  'A5': 'A5.[mp3|ogg]',
  'C6': 'C6.[mp3|ogg]',
}, {
  'release': 1,
  'baseUrl': 'static/audio/'
}).toMaster()

var plucky = new Tone.PluckSynth().toMaster()

const SCREEN_WIDTH = document.documentElement.getBoundingClientRect().width
const SCREEN_HEIGHT = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

window.tonepart = [] // store all the music parts. (ummm,that's why it's named part...)
let bouncepart = []

let recordStartTime = 0

let isLinger = true //非播放状态中未开始录音
var replayInterval = undefined //控制progressbar的setinterval
let playOffset = 0 //播放状态的拉条bar初始时间记录
let lingerOffset = 0 //未播放状态的拉条bar初始时间记录
const PROGRESS_INTERVAL_TIME = 0.1 //0.1秒挪一下
export default {
  components: {
    swiper,
    swiperSlide,
    vueSlider,
  },
  data() {
    return {
      activeNote: {},
      recordPart: [], //current record part
      recordParts: [], //each new record goes in here.
      playing: false,
      generalControllerShow: false,
      activeSwiperIndex: 3,
      lastActiveSwiperIndex: 3 - 1,
      vuetimeline: 0,
      timelineConfig: {
        value: 0,
        width: 8,
        height: '90%',
        padding: '0',
        dotSize: 20,
        eventType: 'auto',
        min: 0,
        max: 200,
        interval: 1,
        disabled: false,
        show: true,
        tooltip: 'always',
        // tooltip: 'hidden',
        piecewise: false,
        reverse: true,
        style: {
          display: 'inline-block',
        },
        class: 'star-slider',
        direction: 'vertical',
        speed: PROGRESS_INTERVAL_TIME,
        bgStyle: {
          backgroundColor: 'rgb(110,113,158)',
          boxShadow: 'inset 0.5px 0.5px 3px 1px rgba(0,0,0,.36)'
        },
        tooltipStyle: {
          backgroundColor: 'rgb(69, 106, 255)',
          borderColor: 'rgb(69, 106, 255)',
          // transform: 'rotate(90deg)',
        },
        formatter(value) {
          if (value) {
            return `${(value/10).toFixed(1)}s/20s`
          } else {
            return `0.0s/20s`
          }
        },
        processStyle: {
          backgroundColor: 'rgb(69,106,255)'
        }
      },
    }
  },
  watch: {
    playing: function(val) {
      console.log('playing status', val)
      if (val) {
        //start progress bar
        replayInterval = setInterval(() => {

          this.vuetimeline += 1
          if (this.vuetimeline >= 200) {
            this.toggleReplay()
            this.vuetimeline = 0

          }
        }, PROGRESS_INTERVAL_TIME * 1000)

      } else {
        //stop progress bar
        clearInterval(replayInterval)
      }
    },
  },
  computed: {
    swiper() {
      return this.$refs.pianoRoll.swiper
    },
    activePartIndex() {
      return this.PARTNUM - this.activeSwiperIndex - 1
    },
    lastActivePartIndex() {
      return this.PARTNUM - this.lastActiveSwiperIndex - 1
    }
  },
  methods: {
    load() {},
    toggleReplay() {
      console.log(1)
      this.playing = !this.playing
      if (this.playing) {
        if (this.vuetimeline >= 200) {
          this.vuetimeline = 0
        }
        // this.confirmRecordPart(!isLinger)
        playOffset = performance.now() - this.vuetimeline * 100
        console.log('播放开始')
        this.confirmRecordPart(0)
        console.log('kokokoko')
        recordStartTime = performance.now();
        console.log(`activeOffsetTime${this.vuetimeline*100}`)
        Tone.Transport.start("+0.01", this.vuetimeline * 100 / 1000) // TODO:有问题in case < context.currentTime
      } else {
        console.log('播放停了')
        Tone.Transport.stop(0) // TODO：必须stop才能start。。。有没有自动stop啊..
        // recordStartTime = performance.now()
      }
    },
    touchNoteStartHandler(e) {
      let noteTime = 0
      // console.log('down', e.target.id)
      piano.triggerAttack(e.target.id)
      // console.log('midi no. :', Tone.Frequency(e.target.id).toMidi())
      this.$set(this.activeNote, e.target.id, 1)
      if (!this.playing) {
        if (isLinger) {
          recordStartTime = performance.now()
          lingerOffset = this.vuetimeline * 100
          isLinger = false
        }
        noteTime = performance.now() - recordStartTime + lingerOffset
      } else {
        noteTime = performance.now() - playOffset
        // noteTime = this.vuetimeline * 100
        // console.log('1', this.vuetimeline * 100)
        // console.log('2', performance.now() - recordStartTime + this.vuetimeline*100)
      }
      if (noteTime < 20000) {
        this.vuetimeline = 10 * noteTime / 1000
        this.recordPart.push({
          'note': e.target.id,
          'time': +(noteTime / 1000).toFixed(4)
        })
      } else {
        this.vuetimeline = 20 * 10 // 颗粒度是0.1s => 200份
        console.log('cannot record more than 20 seconds')
      }
    },
    touchMove(e) {
      console.log(e)
    },
    touchNoteEndHandler(e) {
      piano.triggerRelease(e.target.id)
      this.$set(this.activeNote, e.target.id, 0)
    },
    confirmRecordPart(shouldClearTime) {
      if (this.recordPart.length) {
        console.log('processing track: ', this.lastActivePartIndex)
        if (this.recordParts[this.lastActivePartIndex] && this.recordParts[this.lastActivePartIndex].length) {
          //已在该track录过,merge both
          this.recordPart = this.recordPart.concat(this.recordParts[this.lastActivePartIndex])
        }
        if (tonepart[this.lastActivePartIndex]) {
          tonepart[this.lastActivePartIndex].dispose() //覆盖之前的需要dispose
        }
        tonepart[this.lastActivePartIndex] = new Tone.Part(function(time, value) { //不能老这new啊，要每次一个数组，每次改动最后一个
          piano.triggerAttackRelease(value.note, "8n", time)
        }, this.recordPart).start(0)
        this.recordParts[this.lastActivePartIndex] = this.recordPart
        this.recordPart = []
      } else {
        console.log('啥也没录')
      }
      this.lastActiveSwiperIndex = this.activeSwiperIndex
      // reinit time
      if (shouldClearTime) {
        this.vuetimeline = 0 // this is kind of separate for progress view
        recordStartTime = 0
      }
      isLinger = true
    },
    clearRecordPart(trackNum) {
      console.log(`cleaning track ${trackNum}`)
      if (this.activePartIndex === trackNum) {
        this.recordPart = []
      }
      if (this.recordParts[trackNum] && this.recordParts[trackNum].length) {
        this.$set(this.recordParts, trackNum, [])
        tonepart[trackNum].dispose() //dispose掉
        tonepart[trackNum] = undefined //同时要从数组中删掉
      } else {
        console.log(`track ${trackNum} has no content`)
      }
    },
    bounceProject() {
      this.confirmRecordPart(0)
      console.log(this)
      console.log(tonepart)
      bouncepart = []
      if (tonepart.length) {
        tonepart.forEach(item => {
          item._events.forEach(noteInfo => {
            bouncepart.push(noteInfo.value)
          })
        })
        bouncepart.sort((a, b) => (0 + a.time - b.time))
        this.$store.dispatch('BOUNCE_PROJECT', {
          record: bouncepart
        }).then(() => {
          console.log('successfully bounced')
          // this.$router.push('/music-box-viewer')
        })
        while (tonepart.length) {
          tonepart.pop().dispose() //最后一个被dispose，同时要从数组中删掉
        }
        tonepart[0] = new Tone.Part(function(time, value) {
          piano.triggerAttackRelease(value.note, "8n", time)
        }, bouncepart).start(0)
        Magic.generateJSCadCode(bouncepart)
      } else {
        alert('tm什么都没录')
      }
    },
    mapNoteTimeToColor(t) {
      return Magic.mapNoteTimeToColor(t)
    },
    mapNoteMidiToLength(m) {
      return Magic.mapNoteMidiToLength(m)
    },
    adjustTimeline(e) {
      if (this.playing) {
        console.log('ccccccccc')
        this.toggleReplay() //现在播放中拉条，直接停，涉及到ref读不到最新值貌似，无法直接继续播放 this is TODO
      } else {
        isLinger = true //你拉条了肯定是
      }
    },
    onMiniKeyboardScroll(e) {
      SCREEN_HEIGHT
      console.log(e.touches[0].clientY)
    },
    onMiniKeyboardStart(e) {
      console.log(e)
    },
  },
  created() {
    //check cookie to get serviceToken first
    // if stoken not exist, go auth
    const self = this
    this.PARTNUM = 3
    this.pianoRollSwiperOption = {
      initialSlide: this.PARTNUM,
      // centeredSlides: true,
      slidesPerView: 3,
      on: {
        // slideChange(e){
        //   console.log('1',e)
        // },
        // slideNextTransitionStart(e) {
        //   console.log('2',e)
        // },
        transitionEnd: function(e) {
          console.log('3', this.activeIndex) // THIS!!! within swiper...
          self.activeSwiperIndex = this.activeIndex
          self.confirmRecordPart(!isLinger)
        }
      }
    }
    const inWechat = /micromessenger/.test(navigator.userAgent.toLowerCase())
    if (!inWechat) return
    if (Util.getUrlParam('code') || Cookies.get('serviceToken')) {
      //TODO:ajax call to get info
      Api.getUserInfo(Util.getUrlParam('code'))
        .then((res) => {
          if (res.data.errcode >= 20000) {
            // 网页内cookie失效，需要重新验证
            Cookies.remove('serviceToken')
            location.replace(
              'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx2cb950ff65a142c5&redirect_uri=http://m.musixise.com/new-music-box-maker&response_type=code&scope=snsapi_userinfo&state=type&quan,url=http://m.musixise.com/new-music-box-maker&connect_redirect=1#wechat_redirect'
            )
          }
          alert(`welcome${res.data.data.realname}`)
          console.log('get user info success', res.data.data)
        })
        .catch((err) => {
          Cookies.remove('serviceToken')
          location.replace(
            'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx2cb950ff65a142c5&redirect_uri=http://m.musixise.com/new-music-box-maker&response_type=code&scope=snsapi_userinfo&state=type&quan,url=http://m.musixise.com/new-music-box-maker&connect_redirect=1#wechat_redirect'
          )
        })
    } else { //又没有微信给的auth code又没有token存在cookie，只得验证
      location.replace(
        'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx2cb950ff65a142c5&redirect_uri=http://m.musixise.com/new-music-box-maker&response_type=code&scope=snsapi_userinfo&state=type&quan,url=http://m.musixise.com/new-music-box-maker&connect_redirect=1#wechat_redirect'
      )
    }
  },
  mounted() {
    // this.startRecord();
    document.querySelector('#D5').addEventListener( "pointerenter", ()=>{
      console.log('jinru')
    })
  },
  updated() {}
};
</script>

<template>
<div id="container">
  <!-- <v-touch @pan="onPan"> -->
  <div class="keys" @touchstart.stop.prevent="touchNoteStartHandler" @touchend.stop.event="touchNoteEndHandler">
    <!-- using sharp sign => '#' as object key cause syntax error... -->
    <!-- <div :class="['white', 'a', activeNote.A3?'active-note':'']" id="A3"></div>
      <div :class="['black', 'b-minor', activeNote.Bb3?'active-note':'']" id="Bb3"></div>
      <div :class="['white', 'b', activeNote.B3?'active-note':'']" id="B3"></div> -->
    <div :class="['white', 'c', activeNote.C4?'active-note':'']" id="C4"></div>
    <div :class="['black', 'd-minor', activeNote.Db4?'active-note':'']" id="Db4"></div>
    <div :class="['white', 'd', activeNote.D4?'active-note':'']" id="D4"></div>
    <div :class="['black', 'e-minor', activeNote.Eb4?'active-note':'']" id="Eb4"></div>
    <div :class="['white', 'e', activeNote.E4?'active-note':'']" id="E4"></div>
    <div :class="['white', 'f', activeNote.F4?'active-note':'']" id="F4"></div>
    <div :class="['black', 'f-sharp', activeNote.Gb4?'active-note':'']" id="Gb4"></div>
    <div :class="['white', 'g', activeNote.G4?'active-note':'']" id="G4"></div>
    <div :class="['black', 'a-minor', activeNote.Ab4?'active-note':'']" id="Ab4"></div>
    <div :class="['white', 'a', activeNote.A4?'active-note':'']" id="A4"></div>
    <div :class="['black', 'b-minor', activeNote.Bb4?'active-note':'']" id="Bb4"></div>
    <div :class="['white', 'b', activeNote.B4?'active-note':'']" id="B4"></div>
    <div :class="['white', 'c', activeNote.C5?'active-note':'']" id="C5"></div>
    <div :class="['black', 'd-minor', activeNote.Db5?'active-note':'']" id="Db5"></div>
    <div :class="['white', 'd', activeNote.D5?'active-note':'']" id="D5"></div>
    <div :class="['black', 'e-minor', activeNote.Eb5?'active-note':'']" id="Eb5"></div>
    <div :class="['white', 'e', activeNote.E5?'active-note':'']" id="E5"></div>
    <div :class="['white', 'f', activeNote.F5?'active-note':'']" id="F5"></div>
    <div :class="['black', 'f-sharp', activeNote.Gb5?'active-note':'']" id="Gb5"></div>
    <div :class="['white', 'g', activeNote.G5?'active-note':'']" id="G5"></div>
    <div :class="['black', 'a-minor', activeNote.Ab5?'active-note':'']" id="Ab5"></div>
    <div :class="['white', 'a', activeNote.A5?'active-note':'']" id="A5"></div>
    <div :class="['black', 'b-minor', activeNote.Bb5?'active-note':'']" id="Bb5"></div>
    <div :class="['white', 'b', activeNote.B5?'active-note':'']" id="B5"></div>
    <div :class="['white', 'c', activeNote.C6?'active-note':'']" id="C6"></div>
  </div>
  <div class="scroll-container">
    <!-- <button type="button" name="button" @touchstart="bounceProject" style="width: 20px;background-color: red;height: 20px;"></button> -->
    <div class="mini-keyboard" @touchmove="onMiniKeyboardScroll" @touchstart="onMiniKeyboardStart">

    </div>
  </div>
  <div class="semi-piano-roll" @touchmove.stop.prevent>
    <swiper :options="pianoRollSwiperOption" ref="pianoRoll">
      <!-- slides -->
      <swiper-slide v-for="n in PARTNUM">
        <div class="current-piano-roll">
          <svg :style="{height:'90%',padding:timelineConfig.dotSize/2+'px 0'}">
            <line v-if="activePartIndex===(PARTNUM-n)" v-for="(item,index) in recordPart"
              x1="0"
              :x2="mapNoteMidiToLength(item.note)"
              :y1="100*item.time/20 + '%'"
              :y2="100*item.time/20 + '%'"
              :stroke="mapNoteTimeToColor(item.time)"
              stroke-width="3"
              stroke-linecap="round"/>
            <line v-for="(item,index) in recordParts[PARTNUM-n]"
              x1="0"
              :x2="mapNoteMidiToLength(item.note)"
              :y1="100*item.time/20 + '%'"
              :y2="100*item.time/20 + '%'"
              :stroke="activePartIndex===(PARTNUM-n)?mapNoteTimeToColor(item.time):'rgb(120,120,120)'"
              stroke-width="3"
              stroke-linecap="round"/>
          </svg>
          <div class="temp" @click="clearRecordPart(PARTNUM-n)"></div>
        </div>
      </swiper-slide>
      <!-- need the bottom two empty slides to fill whole swiper -->
      <swiper-slide></swiper-slide>
      <swiper-slide></swiper-slide>
    </swiper>
  </div>

  <div class="g-controller">
    <!-- <div class="timeline">
      <div class="progress">

      </div>
      <div class="indicator">

      </div>
    </div> -->
    <vue-slider v-model="vuetimeline" v-bind="timelineConfig" @callback="adjustTimeline" @drag-end=""></vue-slider>
    <div :class="[playing?'pauseBtn':'playBtn', 'rotate']" @click="toggleReplay">

    </div>
  </div>

  <!-- </v-touch> -->
</div>
</template>

<style lang="scss" scoped>
@import '../_common/style/_functions.scss';
@import '../_common/style/_variables.scss';
@import '../_common/style/_mixins.scss';
@import '../_common/style/_reboot.scss';
.g-controller {
    position: fixed;
    width: getRem(42);
    height: 100%;
    padding-top: getRem(44);
    display: flex;
    flex-direction: column;
    align-items: center;
    right: 0.3rem;
    .timeline {
        height: 90%;
        width: getRem(16);
        background-color: rgb(110,113,158);
        .progress {
            height: 5%;
            background-color: rgb(69,106,255);
        }
        .indicator {
            position: relative;
            width: getRem(42);
            height: getRem(42);
            border-radius: getRem(21);
            border: 4px;
            border-color: yellow;
            background-color: #fff;
            right: getRem(13);
        }
    }
    .playBtn {
        width: getRem(84);
        height: getRem(84);
        margin-top: 0.3rem;
        border-radius: getRem(42);
        background: url('../assets/play.svg') center center no-repeat;
        background-size: getRem(32);
        background-color: rgb(69,106,255);
    }
    .pauseBtn {
        width: getRem(84);
        height: getRem(84);
        margin-top: 0.3rem;
        border-radius: getRem(42);
        background: url('../assets/pause.svg') center center no-repeat;
        background-size: getRem(32);
        background-color: rgb(69,106,255);
    }
}
.scroll-container {
    display:flex;
    justify-content:center;
    align-items: center;
    position: fixed;
    background-color: yellow;
    width: getRem(138);
    height: 100%;
    left: getRem(328);
    .mini-keyboard {
      width:getRem(80);
      height:200px;
      background-color:pink;
    }
}
.temp {
    width: 0.7rem;
    height: 0.7rem;
    border-radius: 0.35rem;
    margin: 0.5rem 0 0;
    background: url('../assets/delete.svg') center center no-repeat;
    background-size: getRem(32);
    background-color: #8e7aef;
}

#container {
    position: absolute;
    width: 100%;
    height: 100%;
}
h2 {
    font-size: 20px;
    color: #2c3e50;
}

* {
    user-select: none;
    margin: 0;
    padding: 0;
}

.container {
    width: 100%;
    height: 100%;
    position: absolute;
}

.keys {
    /* position: absolute;  make whole keys appear */
    height: 100%;
    position: fixed;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: space-between;
    float: left;
    /* padding-right:getRem(347); */
    box-sizing: border-box;
}
.scroll-container {}
.semi-piano-roll {
    top: 0;
    width: getRem(284);
    position: fixed;
    right: 0;
    height: 100%;
    background-color: rgb(19,19,21);
    .swiper-container {
        height: 100%;
    }
    .current-piano-roll {
        display: flex;
        flex-direction: column;
        height: 100%;
        padding-top: getRem(44);
        padding-left: getRem(18);
        svg {
            bottom: getRem(92);
            height: 100%;
            width: 100%;
        }
    }
}

.general-controller {
    display: flex;
    width: 2.5rem;
    position: fixed;
    right: 0;
    height: 100%;
    background: linear-gradient(90deg, rgba(40,40,40,.5) 0%, rgba(40,40,40,.8) 100%);
    .funcBtn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: getRem(100);
        height: getRem(220);
        border-radius: getRem(10);
        box-sizing: border-box;
        &.record {
            background-color: #b70411;
            .recordHint {
                width: getRem(50);
                height: getRem(50);
                background-color: white;
                border-radius: 50%;
            }
            &.active {
                background-color: red;
                border: 1px solid white;
            }
        }
        &.play {
            background-color: #098244;
            .playHint {
                width: getRem(50);
                height: getRem(50);
                background: url('../assets/play.svg') center center;
                background-size: cover;
            }
            .stopHint {
                width: getRem(45);
                height: getRem(45);
                background-color: white;
                border-radius: 10%;
            }
            &.active {
                background-color: #0aca0a;
                border: 1px solid white;
            }
        }
        &.undo {
            background-color: #a4af00;
            .undoHint {
                width: getRem(50);
                height: getRem(50);
                background: url('../assets/undo.svg') center center;
                background-size: cover;
            }
            &:active {
                background-color: #e3f300;
                // border: 1px solid white;
            }
        }
        &.bounce {
            background-color: black;
            .bounceHint {
                width: getRem(50);
                height: getRem(50);
                background: url('../assets/bounce.svg') center center;
                background-size: cover;
            }
            &.active {
                background-color: green;
                border: 1px solid white;
            }
        }
    }
}
.general-controller-enter-active,
.general-controller-leave-active {
    transition: all 0.5s ease;
}
.general-controller-enter,
.general-controller-leave-to {
    transform: translateX(3.5rem);
}

.progressBar {
    position: fixed;
    width: getRem(750);
}

/* piano keyboard layout css  */

.white {
    width: getRem(328);
    height: getRem(92);
    z-index: 1;
    border-left: 1px solid #bbb;
    border-bottom: 1px solid #bbb;
    border-radius: 0 0 5px 5px;
    box-shadow: -1px 0 0 rgba(255, 255, 255, 0.8) inset, 0 0 5px #ccc inset, 0 0 3px rgba(0, 0, 0, 0.2);
    background: linear-gradient(top, #eee 0%, #fff 100%);
    &.active-note {
        box-shadow: 2px 0 3px rgba(0, 0, 0, 0.1) inset, -5px 5px 20px rgba(0, 0, 0, 0.2) inset, 0 0 3px rgba(0, 0, 0, 0.2);
        background: linear-gradient(top, #fff 0%, #e9e9e9 100%);
    }
}

.black {
    position: relative;
    width: getRem(170);
    height: getRem(54);
    margin-top: getRem(-27);
    top: getRem(27);
    z-index: 2;
    border: 1px solid #000;
    border-radius: 0 0 3px 3px;
    box-shadow: -1px -1px 2px rgba(255, 255, 255, 0.2) inset, 0 -5px 2px 3px rgba(0, 0, 0, 0.6) inset, 0 2px 4px rgba(0, 0, 0, 0.5);
    background: linear-gradient(45deg, #222 0%, #555 100%);
    &.active-note {
        box-shadow: -1px -1px 2px rgba(255, 255, 255, 0.2) inset, 0 -2px 2px 3px rgba(0, 0, 0, 0.6) inset, 0 1px 2px rgba(0, 0, 0, 0.5);
        background: linear-gradient(left, #444 0%, #222 100%);
    }
}

.a,
.c,
.d,
.f,
.g {
    margin-bottom: getRem(-25);
}

/* mask layout */

.mask {
    position: fixed;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    z-index: 100;
    display: flex;
    align-items: center;
    justify-content: center;
}

.mask #timer {
    color: white;
    font-size: xx-large;
    font-style: italic;
}

.fadein {
    animation: fadein 1s;
    animation-fill-mode: forwards;
}

.fadeout {
    animation: fadeout 1s;
    animation-fill-mode: forwards;
}
@keyframes fadein {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}
@keyframes fadeout {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
    }
}

.hide {
    display: none;
}

.rotate {
    transform: rotate(90deg);
}
</style>
